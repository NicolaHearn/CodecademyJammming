{"version":3,"sources":["util/Spotify.js","reportWebVitals.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/PlayList/PlayList.js","components/App/App.js","index.js"],"names":["accessToken","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SearchBar","props","state","searchTerm","handleTermChange","bind","search","event","this","setState","target","value","onSearch","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","response","json","jsonResponse","items","uri","savePlayList","trackURIs","length","userId","method","body","JSON","stringify","playListId","uris","App","playListName","updatePlayListName","find","savedTrack","push","filter","currentTrack","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6ac43ce.chunk.js","sourcesContent":["const clientId = \"d2650ce81f54479ba3422d7448032088\";\r\nconst redirectURI = \"nh_first_react_app.surge.sh\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(searchTerm) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n        return response.json();\r\n    }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artist,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n        }));\r\n    });\r\n    \r\n  },\r\n\r\n  savePlayList(name, trackURIs) {\r\n      if (!name || !trackURIs.length) {\r\n          return;\r\n      }\r\n\r\n      const accessToken = Spotify.getAccessToken();\r\n      const headers = { Authorization: `Bearer ${accessToken}`};\r\n      let userId;\r\n\r\n      return fetch('https://api.spotify.com/v1/me', {\r\n        headers: headers}\r\n        ).then(response => response.json() \r\n      ).then(jsonResponse => {\r\n          userId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n            headers: headers, \r\n            method: 'POST', \r\n            body: JSON.stringify({ name: name})\r\n          })\r\n        .then(response => response.json()\r\n      ).then(jsonResponse => {\r\n          const playListId = jsonResponse.id;\r\n          return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`, {\r\n            headers: headers, \r\n            method: 'POST', \r\n            body: JSON.stringify({uris: trackURIs})\r\n          });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport './SearchBar.css'\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: ''\r\n    };\r\n\r\n    \r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.search = this.search.bind(this);\r\n\r\n  }\r\n\r\n  \r\n  handleTermChange(event) {\r\n    this.setState({searchTerm: event.target.value})\r\n\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.searchTerm)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n    }\r\n  }\r\n\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>\r\n            {this.props.track.artist} | {this.props.track.album}\r\n          </p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from \"react\";\r\nimport \"./TrackList.css\";\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {\r\n        this.props.tracks.map((track) => {\r\n          return <Track track={track} \r\n                        key={track.id} \r\n                        onAdd={this.props.onAdd} \r\n                        onRemove={this.props.onRemove} \r\n                        isRemoval={this.props.isRemoval}/>;\r\n        })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nclass SearchResults extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults","import React from \"react\";\r\nimport './PlayList.css';\r\nimport TrackList from '../TrackList/TrackList'\r\n\r\nclass PlayList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n   this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={'New Playlist'} \r\n               onChange={this.handleNameChange}/>\r\n        <TrackList tracks={this.props.playListTracks} \r\n                   onRemove={this.props.onRemove} \r\n                   isRemoval={true}/>\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport PlayList from \"../PlayList/PlayList\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playListName: \"myPlayList\",\n      playListTracks: [],\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlayListName = this.updatePlayListName.bind(this);\n    this.savePlayList = this.savePlayList.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search(searchTerm) {\n    Spotify.search(searchTerm).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playListTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playListTracks: tracks})\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playListTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playListTracks: tracks});\n    \n  }\n\n  updatePlayListName(name) {\n    this.setState({playListName: name});\n  }\n\n  savePlayList() {\n    const trackURIs = this.state.playListTracks.map(track => track.uri);\n    Spotify.savePlayList(this.state.playListName, trackURIs).then(() => {\n      this.setState({\n        playListName: 'New Playlist',\n        playListTracks: []\n      });\n    });\n  }\n\n  \n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <PlayList\n              playListName={this.state.playListName}\n              playListTracks={this.state.playListTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlayListName}\n              onSave={this.savePlayList}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./components/App/App\"\n\n\nReactDOM.render(<App />, document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}